name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  # ===== TESTS BACKEND =====
  backend-tests:
    name: 🧪 Tests Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📋 Install dependencies
      working-directory: backend
      run: npm ci

    - name: 🔍 Type check
      working-directory: backend
      run: npm run type-check

    - name: 🎨 Lint check
      working-directory: backend
      run: npm run lint

    - name: 🗄️ Setup test database
      working-directory: backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        npx prisma generate
        npx prisma migrate deploy

    - name: 🧪 Run tests
      working-directory: backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        ENCRYPTION_KEY: test-encryption-key-32-characters
      run: npm run test:cov

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: backend/coverage/lcov.info
        flags: backend

  # ===== TESTS FRONTEND =====
  frontend-tests:
    name: 🎨 Tests Frontend
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📋 Install dependencies
      working-directory: frontend
      run: npm ci

    - name: 🔍 Type check
      working-directory: frontend
      run: npm run type-check

    - name: 🎨 Lint check
      working-directory: frontend
      run: npm run lint

    - name: 🏗️ Build frontend
      working-directory: frontend
      run: npm run build

    - name: 🧪 Run tests
      working-directory: frontend
      run: npm run test:coverage

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: frontend/coverage/lcov.info
        flags: frontend

  # ===== TESTS END-TO-END =====
  e2e-tests:
    name: 🎭 Tests E2E
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: e2e_user
          POSTGRES_PASSWORD: e2e_password
          POSTGRES_DB: e2e_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📋 Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🗄️ Setup E2E database
      working-directory: backend
      env:
        DATABASE_URL: postgresql://e2e_user:e2e_password@localhost:5432/e2e_db
      run: |
        npx prisma generate
        npx prisma migrate deploy
        npx prisma db seed

    - name: 🚀 Start application
      env:
        DATABASE_URL: postgresql://e2e_user:e2e_password@localhost:5432/e2e_db
        JWT_SECRET: e2e-jwt-secret
        JWT_REFRESH_SECRET: e2e-refresh-secret
      run: |
        cd backend && npm run start:prod &
        cd frontend && npm run preview &
        sleep 10

    - name: 🎭 Run E2E tests
      working-directory: frontend
      run: npm run test:e2e

  # ===== SECURITY SCAN =====
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔍 Audit backend dependencies
      working-directory: backend
      run: npm audit --audit-level high

    - name: 🔍 Audit frontend dependencies
      working-directory: frontend
      run: npm audit --audit-level high

    - name: 🕵️ CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript,typescript

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: 📊 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ===== BUILD DOCKER IMAGES =====
  docker-build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ghcr.io/${{ github.repository }}/backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ghcr.io/${{ github.repository }}/frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== DEPLOYMENT STAGING =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Ici, vous ajouteriez vos commandes de déploiement spécifiques
        # Par exemple: kubectl, docker-compose, ou scripts personnalisés

  # ===== DEPLOYMENT PRODUCTION =====
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🏭 Deploy to production
      run: |
        echo "🏭 Deploying to production environment..."
        # Ici, vous ajouteriez vos commandes de déploiement spécifiques

  # ===== NOTIFICATION =====
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: 📢 Send notification
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "🎉 Production deployment successful!"
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "🎉 Staging deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi